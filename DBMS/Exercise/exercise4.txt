-------------------QUESTION----------------------


Exercise 4 Joins
Consider the following database of student enrollment in courses &
books adopted for each course:
STUDENT (regno: string, name: string, major: string, bdate:date)
COURSE (course #:int, cname:string, dept:string)
ENROLL ( regno:string, course#:int, sem:int, marks:int)
BOOK _ ADOPTION (course# :int, sem:int, book-ISBN:int)
TEXT (book-ISBN:int, book-title:string, publisher:string,
author:string)
Demonstrate with appropriate SQL Statement for the following:
1. Create the above tables by properly specifying the primary keys
and the foreign keys.
2. Enter at least five tuples for each relation.
3. Demonstrate how you add a new text book to the database and
make this book be adopted by some department.
4. List the students who have been enrolled.
5. List the students who have registered but not enrolled.
6. List the books which have been adopted.
7. List any department that has all its adopted books published by a
specific publisher.
8. Illustrate inner join, Left join, right join, full join by joining
STUDENT and ENROLL table.
Objective:
The objective of this exercise is to enable you to understand and use SQL
relational concepts along with the concepts of Joins.

-------------SOLUTION-------------


CREATE DATABASE exercise4;
USE exercise4;

CREATE TABLE STUDENT (
	regno varchar(10) PRIMARY KEY,
    name varchar(500),
    major varchar(30),
    bdate DATE
);

CREATE TABLE COURSE (
    course_no INT PRIMARY KEY,
    cname VARCHAR(50),
    dept VARCHAR(30)
);


CREATE TABLE ENROLL (
    regno VARCHAR(10),
    course_no INT,
    sem INT,
    marks INT,
    PRIMARY KEY (regno, course_no),
    FOREIGN KEY (regno) REFERENCES STUDENT(regno),
    FOREIGN KEY (course_no) REFERENCES COURSE(course_no)
);

CREATE TABLE BOOK_ADOPTION (
    course_no INT,
    sem INT,  -- No Foreign Key because sem is not unique
    book_ISBN BIGINT,  -- Matching the data type with TEXT(book_ISBN)
    PRIMARY KEY (course_no, sem, book_ISBN),
    FOREIGN KEY (course_no) REFERENCES COURSE(course_no),
    FOREIGN KEY (book_ISBN) REFERENCES TEXT(book_ISBN)
);

CREATE TABLE TEXT (
    book_ISBN BIGINT PRIMARY KEY,
    book_title VARCHAR(100),
    publisher VARCHAR(50),
    author VARCHAR(50)
);

-- Inserting Values

INSERT INTO STUDENT VALUES 
('S101', 'Alice', 'CS', '2001-05-10'),
('S102', 'Bob', 'ECE', '2000-07-12'),
('S103', 'Charlie', 'ME', '1999-09-25'),
('S104', 'David', 'CS', '2002-01-15'),
('S105', 'Eve', 'ECE', '2001-11-30');

INSERT INTO COURSE VALUES 
(101, 'Database Systems', 'CS'),
(102, 'Digital Circuits', 'ECE'),
(103, 'Thermodynamics', 'ME'),
(104, 'Operating Systems', 'CS'),
(105, 'Electromagnetics', 'ECE');

INSERT INTO ENROLL VALUES 
('S101', 101, 1, 85),
('S102', 102, 2, 78),
('S103', 103, 1, 88),
('S104', 101, 2, 92),
('S105', 104, 1, 76);

INSERT INTO TEXT VALUES 
(1001, 'Database Concepts', 'Pearson', 'Korth'),
(1002, 'Digital Design', 'McGraw Hill', 'Morris Mano'),
(1003, 'Thermodynamics Basics', 'Oxford', 'Cengel'),
(1004, 'OS Principles', 'Pearson', 'Silberschatz'),
(1005, 'Electromagnetic Theory', 'Cambridge', 'Griffiths');

INSERT INTO BOOK_ADOPTION VALUES 
(101, 1, 1001),
(102, 2, 1002),
(103, 1, 1003),
(104, 2, 1004),
(105, 1, 1005);
