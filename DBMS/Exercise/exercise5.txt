Exercise 5 View, Union
Consider the following tables maintained by a book dealer:
AUTHOR (author-id:int, name:string, city:string, country:string)
PUBLISHER (publisher-id:int, name:string, city:string,
country:string)
CATALOG (book-id:int, title:string, author-id:int, publisher-id:int,
category-id:int, year:int, price:int)
CATEGORY (category-id:int, description:string)
ORDER-DETAILS (order-no:int, book-id:int, quantity:int)
Demonstrate with appropriate SQL Statement for the following:
1. Create the above tables by properly specifying the primary keys
and the foreign keys.
2. Enter at least five tuples for each relation.
3. Give the details of the authors who have 2 or more books in the
catalog and the price of the books is greater than the average price
of the books in the catalog and the year of publication is after
certain year (say 2000).
4. Find the author of the book which has maximum sales.
5. Demonstrate how you increase the price of books published by a
specific publisher by 10%.
6. Illustrate the use of UNION operator between the table AUTHOR
and CATALOG table.
Objective: The objective of this exercise is to enable you to understand
Transaction processing and create VIEW. Its objective is also to get the
concept of UNION operator.

CREATE DATABASE exercise5;
USE exercise5;

CREATE TABLE AUTHOR (
    author_id INT PRIMARY KEY,
    name VARCHAR(100),
    city VARCHAR(50),
    country VARCHAR(50)
);

CREATE TABLE PUBLISHER (
    publisher_id INT PRIMARY KEY,
    name VARCHAR(100),
    city VARCHAR(50),
    country VARCHAR(50)
);

CREATE TABLE CATEGORY (
    category_id INT PRIMARY KEY,
    description VARCHAR(100)
);

CREATE TABLE CATALOG (
    book_id INT PRIMARY KEY,
    title VARCHAR(100),
    author_id INT,
    publisher_id INT,
    category_id INT,
    year INT,
    price INT,
    FOREIGN KEY (author_id) REFERENCES AUTHOR(author_id),
    FOREIGN KEY (publisher_id) REFERENCES PUBLISHER(publisher_id),
    FOREIGN KEY (category_id) REFERENCES CATEGORY(category_id)
);

CREATE TABLE ORDER_DETAILS (
    order_no INT PRIMARY KEY,
    book_id INT,
    quantity INT,
    FOREIGN KEY (book_id) REFERENCES CATALOG(book_id)
);


-- Insert data into table

INSERT INTO AUTHOR VALUES 
(1, 'J.K. Rowling', 'London', 'UK'),
(2, 'Dan Brown', 'New York', 'USA'),
(3, 'George Orwell', 'London', 'UK'),
(4, 'Agatha Christie', 'Paris', 'France'),
(5, 'J.R.R. Tolkien', 'Birmingham', 'UK');

INSERT INTO PUBLISHER VALUES 
(1, 'Penguin Books', 'London', 'UK'),
(2, 'HarperCollins', 'New York', 'USA'),
(3, 'Hachette', 'Paris', 'France'),
(4, 'Bloomsbury', 'London', 'UK'),
(5, 'Random House', 'Berlin', 'Germany');

INSERT INTO CATEGORY VALUES 
(1, 'Fiction'),
(2, 'Thriller'),
(3, 'Science Fiction'),
(4, 'Mystery'),
(5, 'Fantasy');

INSERT INTO CATALOG VALUES 
(101, 'Harry Potter', 1, 4, 5, 2007, 500),
(102, 'The Da Vinci Code', 2, 2, 2, 2003, 600),
(103, '1984', 3, 1, 3, 1949, 400),
(104, 'Murder on the Orient Express', 4, 3, 4, 1934, 350),
(105, 'The Hobbit', 5, 5, 5, 1937, 450),
(106, 'Angels and Demons', 2, 2, 2, 2000, 550),
(107, 'Harry Potter and the Chamber of Secrets', 1, 4, 5, 1998, 520);

INSERT INTO ORDER_DETAILS VALUES 
(1001, 101, 50),
(1002, 102, 30),
(1003, 103, 40),
(1004, 104, 20),
(1005, 105, 10),
(1006, 106, 60),
(1007, 107, 15);

						-- QUERIES
-- Give the details of the authors who have 2 or more books in the
-- catalog and the price of the books is greater than the average price
-- of the books in the catalog and the year of publication is after
-- certain year (say 2000)

SELECT a.author_id, a.name, COUNT(c.book_id) AS book_count
FROM AUTHOR a
JOIN CATALOG c ON a.author_id = c.author_id
WHERE c.price > (SELECT AVG(price) FROM CATALOG)
AND c.year > 2000
GROUP BY a.author_id, a.name
-- HAVING COUNT(c.book_id) >= 2; (this condition is too restrictive)
